# -*- coding: utf-8 -*-
"""
Created on Thu Mar  2 13:10:38 2023

Code NO.3

@author: LIC7LR
"""

from Feature_Engineering import DatasetConstruction
from Feature_Engineering import FeatureEngineering
from Feature_Engineering import PrincipleComponentAnalyse

import matplotlib.pyplot as plt
import numpy as np
from scipy.spatial.distance import mahalanobis

class Euclidian_Distance:
    
    def get_center(self, data):
        centroid = np.mean(data, axis=0)
        print("Centroid coordinates:", centroid)
        return centroid
    
    def get_distance(self, x, y):
        return np.sqrt(sum(np.square(x - y)))  
    
class Mahalanobis_Distance:

    def get_distance(self, dataA, dataB):
        # Calculate the Mahalanobis distance between each row of A and B
        cov = np.cov(np.vstack((dataA, dataB)), rowvar=False)
        inv_cov = np.linalg.inv(cov)
        
        distances = []
        for i in range(dataA.shape[0]):
            for j in range(dataB.shape[0]):
                distances.append(mahalanobis(dataA[i], dataB[j], inv_cov))
        
        # Print the mean distance between A and B
        print(np.mean(distances))
        return np.mean(distances)    
    
def show_distance(distances, title):
    x = range(1,len(distances)+1)
    y = distances
    plt.plot(x,y,'o-',color = 'g')#o-:圆形
    plt.xlabel("Grinding sequence")#横坐标名字
    plt.ylabel("Distance")#纵坐标名字
    plt.legend(loc = "best")#图例
    plt.title(title)
    
    x_major_locator=plt.MultipleLocator(1)
    ax=plt.gca()
    ax.xaxis.set_major_locator(x_major_locator)
    plt.xlim(1,20)
    plt.show()

if __name__ == '__main__':
    
    ref = "Grind_20"
    ref_path = './Dataset_training/Dataset_training_{}.csv'.format(ref)
    
    dc = DatasetConstruction()
    fe = FeatureEngineering()
    PCA = PrincipleComponentAnalyse()
    ed = Euclidian_Distance()
    md = Mahalanobis_Distance()
    
    ref_data = dc.get_data(ref_path)
    ref_label_value = 0
    
    Euclidian_distances = []
    Mahalanobis_distances = []
    
    for i in range(1,21):
        pred = "Grind_{}".format(str(i))
        pred_path = './Dataset_training/Dataset_training_{}.csv'.format(pred)
        pred_data = dc.get_data(pred_path)
        pred_label_value = 1
        
        data, label = dc.construct_plural([ref_data,pred_data], [ref_label_value,pred_label_value])
        
        fe.send_data_label(data, label)
        data, label = fe.preprocess()
        PCA.send_data_label(data, label)
        data_pca = PCA.run()
        PCA.show_info(data_pca, label, cluster_names=[ref,pred])
        
        ref_center = ed.get_center(data_pca[label==0])
        pred_center = ed.get_center(data_pca[label==1])
        e_distance = abs(ed.get_distance(ref_center,pred_center))
        Euclidian_distances.append(e_distance)
        print("Euclidian distance between {} and {} is {}".format(ref, pred, str(e_distance)))
        
        m_distance = md.get_distance(data_pca[label==0], data_pca[label==1])
        Mahalanobis_distances.append(m_distance)
    
    print('\n*********************** Euclidian Distance ***********************')
    print(Euclidian_distances)
    show_distance(Euclidian_distances, title='Euclidian distances')
    
    print('\n*********************** Mahalanobis Distance ***********************')
    print(Mahalanobis_distances)
    show_distance(Mahalanobis_distances, title='Mahalanobis distances')
    
    
    """
    This function is a kNN unsupervised function, which can find center of multiple unlabelled data.
    Just put here as reference.
    Not really relavant to this Code
    
    import random
    
    class KMediod:
        
        def get_Euclidian_distance(self, x, y):
            return np.sqrt(sum(np.square(x - y)))    
     
        def get_center(self, data):
            k_num_center = 1
            #invD = self.get_inv_ovmatrix(data)
            
            indexs = list(range(len(data)))
            random.shuffle(indexs)  # 随机选择质心
            init_centroids_index = indexs[:k_num_center]
            centroids = data[init_centroids_index, :]   # 初始中心点
            # 确定种类编号
            
            sample_target = []
            if_stop = False
            while(not if_stop):
                if_stop = True
                classify_points = [[centroid] for centroid in centroids]
                sample_target = []
                
                # 遍历数据
                for sample in data:
                    # 计算距离，由距离该数据最近的核心，确定该点所属类别
                    distances = [self.get_Euclidian_distance(sample, centroid) for centroid in centroids]
                    #distances = [self.get_mahalanobis_distance(invD, sample, centroid) for centroid in centroids]
                    cur_level = np.argmin(distances)
                    
                    sample_target.append(cur_level)
                    # 统计，方便迭代完成后重新计算中间点
                    classify_points[cur_level].append(sample)
                    
                # 重新划分质心
                for i in range(k_num_center):  # 几类中分别寻找一个最优点
                    distances = [self.get_Euclidian_distance(point_1, centroids[i]) for point_1 in classify_points[i]]
                    #distances = [self.get_mahalanobis_distance(invD, point_1, centroids[i]) for point_1 in classify_points[i]]
                    now_distances = sum(distances)   # 首先计算出现在中心点和其他所有点的距离总和
                    for point in classify_points[i]:
                        distances = [self.get_Euclidian_distance(point_1, point) for point_1 in classify_points[i]]
                        #distances = [self.get_mahalanobis_distance(invD, point_1, point) for point_1 in classify_points[i]]
                        new_distance = sum(distances)
                        # 计算出该聚簇中各个点与其他所有点的总和，若是有小于当前中心点的距离总和的，中心点去掉
                        if new_distance < now_distances:
                            now_distances = new_distance
                            centroids[i] = point    # 换成该点
                            if_stop = False
            
            # 该函数的原始功能是非监督性学习，即Cluster，即返回sample_target
            #return sample_target
            print(centroids[0])
            return centroids[0]
        
        def show_distance(self, distance_list):
            x = range(1,len(distance_list)+1)
            y = distance_list
            plt.plot(x,y,'o-',color = 'g')#o-:圆形
            plt.xlabel("Grinding sequence")#横坐标名字
            plt.ylabel("Center distance")#纵坐标名字
            plt.legend(loc = "best")#图例
            
            x_major_locator=plt.MultipleLocator(1)
            ax=plt.gca()
            ax.xaxis.set_major_locator(x_major_locator)
            plt.xlim(1,20)
            plt.show()
        """
    
